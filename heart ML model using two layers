pip install tensorflow

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# We are reading our data
df = pd.read_csv("heart.csv")

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Assuming you have loaded the dataset into a variable named 'df'
# Replace 'your_file.csv' with the actual file path if you are loading from a CSV file.

# Preprocess the data
y = df.target.values
x_data = df.drop(['target'], axis=1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(x_data, y, test_size=0.2, random_state=42)

# Standardize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build the neural network model
model = Sequential()
model.add(Dense(32, input_dim=X_train.shape[1], activation='relu'))  # First hidden layer
model.add(Dense(16, activation='relu'))  # Second hidden layer
model.add(Dense(1, activation='sigmoid'))  # Output layer

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_test, y_test))

# Evaluate the model
import numpy as np

# Assuming your Sequential model is stored in the variable 'model'

# Replace the values in the features array with your actual input values
features = np.array([63, 1, 3, 145, 233, 1, 0, 150, 0, 2.3, 0, 0, 1])

# Reshape the features array to have a single row and as many columns as needed
features = features.reshape(1, -1)

# Make the prediction
predicted_probability = model.predict(features)

# Use a threshold (commonly 0.5) to convert probability to binary prediction
threshold = 0.5
binary_prediction = (predicted_probability > threshold).astype(int)

print("Predicted Probability:", predicted_probability)
print("Binary Prediction:", binary_prediction)


